"""This module was auto-generated by datajoint from an existing schema"""


import datajoint as dj

schema = dj.Schema('arseny_s1alm_ephys')


vmod0 = dj.VirtualModule('vmod0', 'arseny_s1alm_experiment')
vmod1 = dj.VirtualModule('vmod1', 'arseny_cf')
vmod2 = dj.VirtualModule('vmod2', 'map_lab')


@schema
class Probe(dj.Lookup):
    definition = """
    probe_part_no        : varchar(20)                  
    ---
    probe_type           : varchar(32)                  
    probe_comment        : varchar(4000)                
    """


@schema
class ElectrodeGroup(dj.Manual):
    definition = """
    # Electrode
    -> vmod0.Session
    electrode_group      : tinyint                      # shank number
    ---
    -> Probe
    """


    class Position(dj.Part):
        definition = """
        -> ElectrodeGroup
        -> vmod1.CFAnnotationType
        ---
        -> vmod2.SkullReference
        ml_location=null     : decimal(8,3)                 # um from ref ; right is positive; based on manipulator coordinates/reconstructed track
        ap_location=null     : decimal(8,3)                 # um from ref; anterior is positive; based on manipulator coordinates/reconstructed track
        dv_location=null     : decimal(8,3)                 # um from dura; ventral is positive; based on manipulator coordinates/reconstructed track
        ml_angle=null        : decimal(8,3)                 # Angle between the mainipulator/reconstructed track and the Medio-Lateral axis. A tilt towards the right hemishpere is positive.
        ap_angle=null        : decimal(8,3)                 # Angle between the mainipulator/reconstructed track and the Anterior-Posterior axis. An anterior tilt is positive.
        """


@schema
class CellType(dj.Lookup):
    definition = """
    cell_type            : varchar(100)                 
    ---
    cell_type_description : varchar(4000)                
    """


@schema
class UnitQualityType(dj.Lookup):
    definition = """
    unit_quality         : varchar(100)                 
    ---
    unit_quality_description : varchar(4000)                
    """


@schema
class Unit(dj.Imported):
    definition = """
    # Sorted unit
    -> ElectrodeGroup
    unit                 : smallint                     
    ---
    unit_uid             : int                          # unique across sessions/animals
    -> UnitQualityType
    unit_channel=null    : float                        # channel on the electrode for which the unit has the largest amplitude
    """


    class Waveform(dj.Part):
        definition = """
        # Estimated unit position in the brain
        -> Unit
        ---
        waveform             : blob                         # unit average waveform. time in samples, amplitude in microvolts.
        spk_width_ms         : float                        # unit average spike width, in ms
        sampling_fq          : float                        # Hz
        waveform_amplitude   : float                        # unit amplitude (peak) in microvolts
        """


    class Spikes(dj.Part):
        definition = """
        -> Unit
        ---
        spike_times          : longblob                     # (s) spike times for the entire session (relative to the beginning of the session)
        """


    class Position(dj.Part):
        definition = """
        # Estimated unit position in the brain
        -> Unit
        -> vmod1.CFAnnotationType
        ---
        -> vmod2.Hemisphere
        -> vmod2.BrainArea
        -> vmod2.SkullReference
        unit_ml_location=null : decimal(8,3)                 # um from ref; right is positive; based on manipulator coordinates (or histology) & probe config
        unit_ap_location=null : decimal(8,3)                 # um from ref; anterior is positive; based on manipulator coordinates (or histology) & probe config
        unit_dv_location=null : decimal(8,3)                 # um from dura; ventral is positive; based on manipulator coordinates (or histology) & probe config
        """


@schema
class TrialSpikes(dj.Imported):
    definition = """
    -> Unit
    -> vmod0.SessionTrial
    ---
    spike_times          : longblob                     # (s) spike times for each trial, relative to the beginning of the trial
    """


@schema
class UnitCellType(dj.Computed):
    definition = """
    -> Unit
    ---
    -> CellType
    """